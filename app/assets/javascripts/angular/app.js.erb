//= depend_on_asset "angular/main.html"

var app = angular.module("rcloudApp", ["ngRoute"]);

app.controller("MainCtrl", function ($scope, $http) {
  $scope.currentUser = null;

  $http.get("/account.json")
    .success(function (user) {
      $scope.currentUser = user;
      console.log("Get current User");
    });

    $scope.signIn = function() {
      alert("sign in function");
    };

    $scope.signOut = function() {
      $http.delete("/users/sign_out.json")
        .success(function(res) {
          $scope.currentUser = null;
        });
    };

  $scope.search = function(query) {
    $scope.search.results = [];

    // Rdio Search
    // –––––––––––––––
    R.request({
      method: "search", 
      content: {
        query: query, 
        types: "Track", // changes to find artist, track, or album
        count: 100
      },
      success: function(response) {
        var tracks = response.result.results;
        // add rdio source to identify which player to use
        // add to results array
        for(var i=0; i<tracks.length; i++ ) {
          var track = tracks[i];
          track.source = "rdio";
          $scope.search.results.push(track);
        }
        
        // reset form       
        $scope.query = null;
        angular.element("form")[0].reset();
        angular.element("form")[0].blur();
        // update scope
        $scope.$apply();
      },
      error: function(response) {
        console.log("error");
        $(".error").text(response.message);
      }
    });

    // SoundCloud Search
    // –––––––––––––––
    SC.get('/tracks', { q: query, license: 'cc-by-sa' }, function(tracks) {

      for(var i=0; i<tracks.length; i++) {
        var track = tracks[i];
        // add soundCloud key to identify which player to use
        track.source = "soundCloud";
        // convert duration to seconds to match rdio
        track.duration = (track.duration / 1000);
        // add to results array
        $scope.search.results.push(track);
      }

      // update scope
      $scope.$apply();
    });


  };

  $scope.closeSearch = function() {
    $scope.search.results = null;
  };

  $scope.playTrack = function(track) {
    console.log(track);
    $scope.rcloud.play(track);
  };

  $scope.queueTrack = function(track) {
    $scope.rcloud.queue.push(track);
    console.log($scope.rcloud.queue);
  };

  $scope.rcloud = new RcloudPlayer();

});


app.controller("PlayerCtrl", function ($scope) {
  $scope.nowPlaying = {};

  $scope.togglePause = function() {
    R.player.togglePause();
  };
  $scope.previous = function() {
    R.player.previous();
  };
  $scope.next = function() {
    R.player.next();
  };

});



// Rcloud Player - Set Up
// ––––––––––––––––––––––––––––––––––––––––––––––––––––
var RcloudPlayer = function () {
  var self = this;
  this.queue = [];
  this.nowPlaying = this.queue[0];
  this.nowPlayingSource = self.nowPlaying ? self.nowPlaying.source : null;
  this.soundCloudPlayer = null;
  this.soundCloudSettings = {useHTML5Audio: true, preferFlash: false};

  // SoundCloud player Init
  SC.initialize({
    client_id: 'f3a51baca351723ad612f5318b1be836',
    redirect_uri: 'http://localhost:3000'
  });
};

// Rcloud Player - Play
// ––––––––––––––––––––––––––––––––––––––––––––––––––––
// Takes the full track object from Rdio or SoundCloud
// Determines which player to use and starts playing
// Sets event to trigger next in queue when track is finished 
RcloudPlayer.prototype.play = function (track) {
  var self = this;
  // add track to beggining of queue
  this.queue[0] = track;

  // Stop current track
  self.stop();

  // determine Rdio or SoundCloud player
  if (track.source === "rdio") { 
    R.player.play({source: track.key});

    // capture when track finishes
    // slightly more elegant than using setInterval
    var positionCounter = 0; // 1 = starting track, 2 = finished playing  
    R.player.on("change:playingSource", function() {
      positionCounter += 1;
      console.log(positionCounter);
      // we only the care about the second change...
      if (positionCounter === 2) {
        // remove finished track from queue
        self.queue.splice(0,1);
        // play next track
        if (self.queue[0]) {
          self.play(self.queue[0]);
          console.log("Playing next track");
        } else {
          console.log("Nothing in queue");
        }
      }
    });
  } else if (track.source === "soundCloud") {
    SC.stream("/tracks/" + track.id, self.soundCloudSettings, function(sound){  
      self.soundCloudPlayer = sound;                    // set track
      html5Audio = sound._player._html5Audio;           // use html audio
      html5Audio.addEventListener('ended', function(){  
        // remove finished track from queue
        self.queue.splice(0,1);
        // play next track
        if (self.queue[0]) {
          self.play(self.queue[0]);
          console.log("Playing next track");
        } else {
          console.log("Nothing in queue");
        }
      });

      self.soundCloudPlayer.play();
    });

  }
};

RcloudPlayer.prototype.stop = function() {
  var self = this;
  // stop Rdio
  R.player.pause();
  // stop SoundCloud
  if (self.soundCloudPlayer && (self.soundCloudPlayer.getState() === "playing")) {
     console.log("stopping SoundCloud");
     self.soundCloudPlayer.stop();
  }
};

//  Rcloud Player - Init 
// ––––––––––––––––––––––––––––––––––––––––––––––––––––
// var rcloud = new RcloudPlayer();

// time filter
app.filter('secondsToDateTime', [function() {
    return function(seconds) {
        return new Date(1970, 0, 1).setSeconds(seconds);
    };
}]);

